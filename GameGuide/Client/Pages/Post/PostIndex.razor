@page "/games/{gameid:int}/{catid:int}"
@inject HttpClient _client
@inject IJSRuntime js
@implements IDisposable
@inject HttpInterceptorService _interceptor


<h3 class="card-title">@category?.Name for @game?.Name</h3>



@if (Posts == null)
{
    <div class="alert alert-info">Loading Posts...</div>
}
else
{
    <table class="table table-responsive" id="postsTable">
        <thead>
            <tr>
                <th>Post Title</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var post in Posts)
            {
                @if (post.CategoryId == catid)
                {
                    <tr>
                        <td>
                        <a href="/posts/view/@post.Id" class="btn btn-outline-dark">
                            <span></span>@post.Title
                        </a>
                        </td>
                        <td>@post.Description</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}
<a href="/games/@gameid" class="btn btn-outline-dark">
    <span></span>Back to List
</a>
@code {
    [Parameter] public int catid { get; set; }
    [Parameter] public int gameid { get; set; }

    private Category? category;
    private Game? game;

    [Inject]
    private IHttpAnonymousClientFactory httpAnonymousClientFactory { get; set; }

    private IList<Post>? Posts;
    private IList<Game>? Games;
    private IList<Category>? Categories;

    protected async override Task OnInitializedAsync()
    {
        try
        {
            _interceptor.MonitorEvent();
            Posts = await _client.GetFromJsonAsync<List<Post>>($"{Endpoints.PostsEndpoint}");
            Games = await _client.GetFromJsonAsync<List<Game>>($"{Endpoints.GamesEndpoint}");
            Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoriesEndpoint}");
            game = await _client.GetFromJsonAsync<Game>($"{Endpoints.GamesEndpoint}/{gameid}");
            category = await _client.GetFromJsonAsync<Category>($"{Endpoints.CategoriesEndpoint}/{catid}");
        }
        catch
        {
            _interceptor.MonitorEvent();
            Games = await httpAnonymousClientFactory.HttpClient.GetFromJsonAsync<List<Game>>($"{Endpoints.GamesEndpoint}");
            Categories = await httpAnonymousClientFactory.HttpClient.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoriesEndpoint}");
            Posts = await httpAnonymousClientFactory.HttpClient.GetFromJsonAsync<List<Post>>($"{Endpoints.PostsEndpoint}");
            game = await _client.GetFromJsonAsync<Game>($"{Endpoints.GamesEndpoint}/{gameid}");
            category = await _client.GetFromJsonAsync<Category>($"{Endpoints.CategoriesEndpoint}/{catid}");
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#postsTable");
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
        js.InvokeVoidAsync("DataTablesDispose", "#postsTable");
    }


}

