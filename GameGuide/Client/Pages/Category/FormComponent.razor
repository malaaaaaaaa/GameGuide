@inject HttpClient _client

<EditForm Model="@category" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled = "@Disabled">
    <div class="form-group">
        <label>Select Game: </label>
        <div>
            <InputSelect @bind-Value="category.GameId" class="form-control">
                <option value="">-- Select Game --</option>
                @if (Games != null)
                {
                    foreach (var game in Games)
                    {
                        <option value="@game.Id">@game.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => category.GameId)" />
        </div>
    </div>
    <div class="form-group">
        <label>Category Name: </label>
        <div>
            <InputText @bind-Value="@category.Name" class="form-control" />
            <ValidationMessage For="@(() => category.Name)" />
        </div>
    </div>
    <div class="form-group">
        <label>Category Description: </label>
        <div>
            <InputTextArea @bind-Value="@category.Description" class="form-control" style="height: 300px;" />
            <ValidationMessage For="@(() => category.Description)" />
        </div>
    </div>
    </fieldset>
    <br />
     @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="categories/view"/>
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Category? category { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Game>? Games;


    protected async override Task OnInitializedAsync()
    {
        Games = await _client.GetFromJsonAsync<List<Game>>($"{Endpoints.GamesEndpoint}");
    }
}
